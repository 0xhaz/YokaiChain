// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.26;

import {Test, console} from "forge-std/Test.sol";
import {NFTDescriptor} from "src/libraries/NFTDescriptor.sol";
import {Strings} from "@openzeppelin/contracts/utils/Strings.sol";

contract MockBackgroundDetail {
    function getItemNameById(uint8 id) external pure returns (string memory) {
        if (id == 1) return "Ordinary";
        return "Unknown";
    }
}

contract NFTDescriptorTest is Test {
    MockBackgroundDetail mockBackground;

    NFTDescriptor.SVGParams params = NFTDescriptor.SVGParams({
        hair: 1,
        eye: 1,
        eyebrow: 1,
        nose: 1,
        mouth: 1,
        mark: 1,
        earring: 1,
        accessory: 1,
        mask: 1,
        background: 1,
        skin: 1,
        timestamp: 1,
        creator: address(0)
    });

    function setUp() public {
        mockBackground = new MockBackgroundDetail();
    }

    function test_generateSVGImage() public view {
        string memory svg = NFTDescriptor.generateSVGImage(params);
        // console.log(svg);

        assertEq(params.hair, 1);
        assertEq(params.eye, 1);
        assertEq(params.eyebrow, 1);
        assertEq(params.nose, 1);
        assertEq(params.mouth, 1);
        assertEq(params.mark, 1);
        assertEq(params.earring, 1);
        assertEq(params.accessory, 1);
        assertEq(params.mask, 1);
        assertEq(params.background, 1);
        assertEq(params.skin, 1);
        assertEq(params.timestamp, 1);
        assertEq(params.creator, address(0));
    }

    function test_generateName() public {
        uint256 tokenId = 123;
        vm.mockCall(
            address(mockBackground),
            abi.encodeWithSelector(MockBackgroundDetail.getItemNameById.selector, 1),
            abi.encode("Cool Background")
        );

        // Generate name
        string memory generatedName = NFTDescriptor.generateName(params, tokenId);

        string memory expectedName = "Ordinary Yoki 123";

        assertEq(generatedName, expectedName);
    }

    function test_generateDescription() public view {
        string memory generatedDescription = NFTDescriptor.generateDescription(params);

        uint256 timeNow = block.timestamp;

        string memory addressInHex = Strings.toHexString(uint256(uint160(params.creator)));
        console.log(addressInHex);

        string memory expectedDescription = string(abi.encodePacked("Generated by 0x00 at ", Strings.toString(timeNow)));

        assertEq(generatedDescription, expectedDescription);
    }
}
